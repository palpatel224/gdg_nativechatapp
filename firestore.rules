rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    match /users/{userId} {
      // Anyone authenticated can read user profiles
      allow read: if request.auth != null;
      // Only the user can write to their own document
      allow write: if request.auth != null && request.auth.uid == userId;
      // Allow create during signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow update only for own profile
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chats collection
    match /chats/{chatId} {
      // Allow read if user is a participant in the chat
      // Also allow read if checking if chat exists (for getOrCreateChat)
      allow read: if request.auth != null && (
                     (resource == null) || // Allow reading non-existent documents
                     (request.auth.uid in resource.data.participants)
                  );
      
      // Allow create if user is one of the participants
      allow create: if request.auth != null && 
                       request.auth.uid in request.resource.data.participants;
      
      // Allow update if user is a participant
      allow update: if request.auth != null && 
                       request.auth.uid in resource.data.participants;
      
      // Allow delete if user is a participant
      allow delete: if request.auth != null && 
                       request.auth.uid in resource.data.participants;
      
      // Messages subcollection within chats
      match /messages/{messageId} {
        // Allow read if user is a participant in the parent chat
        allow read: if request.auth != null && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow create if user is a participant and is the sender
        allow create: if request.auth != null && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                         request.auth.uid == request.resource.data.senderId;
        
        // Allow update if user is a participant (for read receipts, etc.)
        allow update: if request.auth != null && 
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Don't allow delete of messages
        allow delete: if false;
      }
      
      // Live locations subcollection within chats
      match /liveLocations/{userId} {
        // Allow read if user is a participant in the parent chat
        allow read: if request.auth != null && 
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Allow write (create/update) if user is a participant and is updating their own location
        allow write: if request.auth != null && 
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                        request.auth.uid == userId;
        
        // Don't allow delete of live locations
        allow delete: if false;
      }
    }
  }
}
